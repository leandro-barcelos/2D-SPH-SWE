#define NUM_THREADS 1024
#define MAX_PARTICLES_PER_VOXEL 8

#pragma enable_d3d11_debug_symbols

// Buffers
StructuredBuffer<float2> _PositionBuffer;
RWStructuredBuffer<uint> _Bucket;

// Parameters
float2 _DomainMax;
float2 _DomainMin;
uint _BucketResolution;
uint _N;

#pragma kernel CSMain

[numthreads(NUM_THREADS, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Check if we're within texture bounds
    if (id.x >= _N)
        return;

    float2 pos = _PositionBuffer[id.x];
    int2 bucketCoord = int2((pos - _DomainMin) / (_DomainMax - _DomainMin) * (_BucketResolution - 1));
    uint index = (bucketCoord.x + bucketCoord.y * _BucketResolution) * MAX_PARTICLES_PER_VOXEL;

    for (uint j = 0; j < MAX_PARTICLES_PER_VOXEL; j++)
    {
        uint original;
        InterlockedCompareExchange(_Bucket[index + j], _N, id.x, original);
        if(original == _N) break;
    }
}

#pragma kernel ClearBucket

[numthreads(32, 32, 1)]
void ClearBucket(uint3 id : SV_DispatchThreadID)
{
    // Check if we're within texture bounds
    if (any(id >= _BucketResolution))
        return;

    uint idx = (id.x + id.y * _BucketResolution) * MAX_PARTICLES_PER_VOXEL;

    for (uint j = 0; j < MAX_PARTICLES_PER_VOXEL; j++)
    {
        _Bucket[idx + j] = _N;
    }
}
