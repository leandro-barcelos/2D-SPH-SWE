#define NUM_THREADS 1024
#define MAX_PARTICLES_PER_VOXEL 8
#define POW3(x) ((x)*(x)*(x))
#define POW2(x) ((x)*(x))

static const float PI = 3.14159265358979323846264338327950288;
static const float Epsilon = 1e-5;

#pragma enable_d3d11_debug_symbols

// Buffers
StructuredBuffer<uint> _Bucket;
StructuredBuffer<float2> _PositionBuffer;
StructuredBuffer<float> _SmoothingLengthBuffer;
RWStructuredBuffer<float> _WaterDepthBuffer;

// Parameters
float2 _DomainMax;
float2 _DomainMin;
float _ParticleVolume;
uint _BucketResolution;
uint _N;

float W(float rIJ, float l)
{
    float q = rIJ / l;
    if (q > 2.0 || q < 0.0) return 0.0;

    float alpha = 15.0 / (7.0 * PI * POW2(l));

    return alpha * (q < 1 ? 2.0 / 3.0 - POW2(q) + 0.5 * POW3(q) : POW3(2 - q) / 6.0);
}

#pragma kernel CSMain

[numthreads(NUM_THREADS, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Check if we're within texture bounds
    if (id.x >= _N)
        return;

    uint i = id.x;

    float h = 0.0;

    float2 pos = _PositionBuffer[i];
    int2 index3dI = int2((pos - _DomainMin) / (_DomainMax - _DomainMin) * (_BucketResolution - 1));

    for (int x_offset = -1; x_offset <= 1; x_offset++)
    for (int y_offset = -1; y_offset <= 1; y_offset++){
        uint2 index3dJ = index3dI + int2(x_offset, y_offset);
        if(all(index3dJ >= 0) && all(index3dJ < _BucketResolution))
        {
            uint bktJ = (index3dJ.x + index3dJ.y * _BucketResolution) * MAX_PARTICLES_PER_VOXEL;
            for (uint j2 = 0; j2 < MAX_PARTICLES_PER_VOXEL; j2++){
                uint j = _Bucket[bktJ + j2];
                if (j == _N) break;

                float rIJ = distance(pos, _PositionBuffer[j]);

                h += _ParticleVolume * W(rIJ, 
                _SmoothingLengthBuffer[i]);
            }
        }
    }
    
    _WaterDepthBuffer[i] = h;
}
