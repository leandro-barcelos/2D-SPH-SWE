#define NUM_THREADS 1024
#define MAX_PARTICLES_PER_VOXEL 8
#define POW3(x) ((x)*(x)*(x))
#define POW2(x) ((x)*(x))

static const float PI = 3.14159265358979323846264338327950288;
static const float Epsilon = 1e-5;

#pragma enable_d3d11_debug_symbols

// Buffers
RWStructuredBuffer<float2> _PositionBuffer;
RWStructuredBuffer<float2> _VelocityBuffer;
StructuredBuffer<float> _WaterDepthBuffer;
StructuredBuffer<float> _SmoothingLengthBuffer;
StructuredBuffer<uint> _Bucket;
Texture2D<float> _ElevationTexture;
SamplerState my_linear_clamp_sampler;

// Parameters
float2 _DomainMax;
float2 _DomainMin;
float _ParticleVolume;
float _Gravity;
float _RoughnessCoeff;
float _TimeStep;
uint _BucketResolution;
uint _N;

float W(float rIJ, float l)
{
    float q = rIJ / l;
    if (q > 2.0 || q < 0.0) return 0.0;

    float alpha = 15.0 / (7.0 * PI * POW2(l));

    return alpha * (q < 1 ? 2.0 / 3.0 - POW2(q) + 0.5 * POW3(q) : POW3(2 - q) / 6.0);
}

float sampleElevation(float2 position)
{
    float2 uv = (position - _DomainMin) / (_DomainMax - _DomainMin);
    return _ElevationTexture.SampleLevel(my_linear_clamp_sampler, uv, 0) * 1000.0;
}

#pragma kernel CSMain

[numthreads(NUM_THREADS, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Check if we're within texture bounds
    if (id.x >= _N)
        return;

    uint i = id.x;

    // Define a threshold for "nearly dry" particles
    const float DryThreshold = 0.01f;

    // If particle is completely dry, just return (no movement)
    if (_WaterDepthBuffer[i] <= Epsilon)
        return;

    // Special handling for nearly dry particles
    bool nearlyDry = _WaterDepthBuffer[i] < DryThreshold;

    float2 sum = 0.0;

    float2 pos = _PositionBuffer[i];
    int2 index3dI = int2((pos - _DomainMin) / (_DomainMax - _DomainMin) * (_BucketResolution - 1));
    uint index1d = (index3dI.x + index3dI.y * _BucketResolution) * MAX_PARTICLES_PER_VOXEL;

    for (int x_offset = -1; x_offset <= 1; x_offset++)
    for (int y_offset = -1; y_offset <= 1; y_offset++){
        uint2 index3dJ = index3dI + int2(x_offset, y_offset);
        if(all(index3dJ >= 0) && all(index3dJ < _BucketResolution))
        {
            uint bktJ = (index3dJ.x + index3dJ.y * _BucketResolution) * MAX_PARTICLES_PER_VOXEL;
            for (uint j2 = 0; j2 < MAX_PARTICLES_PER_VOXEL; j2++){
                uint j = _Bucket[bktJ + j2];
                if (j == _N) break;

                float rIJ = distance(pos, _PositionBuffer[j]);

                sum += _Gravity * _ParticleVolume / _WaterDepthBuffer[i] * (sampleElevation(_PositionBuffer[j]) - sampleElevation(pos)) * W(rIJ, _SmoothingLengthBuffer[i]) * normalize(pos - _PositionBuffer[j]);
            }
        }
    }

    float2 frictionTerm = -_Gravity * POW2(_RoughnessCoeff) * length(_VelocityBuffer[i]) * _VelocityBuffer[i] / pow(_WaterDepthBuffer[i], 4.0 / 3.0);

    float2 acceleration;
    
    if (nearlyDry)
    {
        // For nearly dry particles, only apply a fraction of the force
        // and ignore friction term which causes division by small numbers
        float drynessFactor = _WaterDepthBuffer[i] / DryThreshold;
        acceleration = sum * _Gravity * drynessFactor;
        
        // Add very small drag to slow down dry particles
        acceleration -= _VelocityBuffer[i] * 0.1;
    } 
    else
    {
        acceleration = sum + frictionTerm;
    }

    if (nearlyDry)
    {
        _VelocityBuffer[i] *= 0.95;
    }

    _VelocityBuffer[i] += acceleration * _TimeStep;

    // Check for NaN or Inf values and correct them
    if (any(isnan(_VelocityBuffer[i])) || any(isinf(_VelocityBuffer[i]))) {
        _VelocityBuffer[i] = 0.0;
    }
    
    _PositionBuffer[i] = clamp(_PositionBuffer[i] + _VelocityBuffer[i] * _TimeStep, _DomainMin, _DomainMax);
}
